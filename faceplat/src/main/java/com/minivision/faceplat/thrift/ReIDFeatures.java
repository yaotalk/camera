package com.minivision.faceplat.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-06")
public class ReIDFeatures implements org.apache.thrift.TBase<ReIDFeatures, ReIDFeatures._Fields>, java.io.Serializable, Cloneable, Comparable<ReIDFeatures> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReIDFeatures");

  private static final org.apache.thrift.protocol.TField BBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("bbox", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReIDFeaturesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReIDFeaturesTupleSchemeFactory());
  }

  public List<Integer> bbox; // required x,y w,h
  public List<Double> features; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BBOX((short)1, "bbox"),
    FEATURES((short)2, "features");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BBOX
          return BBOX;
        case 2: // FEATURES
          return FEATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BBOX, new org.apache.thrift.meta_data.FieldMetaData("bbox", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReIDFeatures.class, metaDataMap);
  }

  public ReIDFeatures() {
  }

  public ReIDFeatures(
    List<Integer> bbox,
    List<Double> features)
  {
    this();
    this.bbox = bbox;
    this.features = features;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReIDFeatures(ReIDFeatures other) {
    if (other.isSetBbox()) {
      List<Integer> __this__bbox = new ArrayList<Integer>(other.bbox);
      this.bbox = __this__bbox;
    }
    if (other.isSetFeatures()) {
      List<Double> __this__features = new ArrayList<Double>(other.features);
      this.features = __this__features;
    }
  }

  public ReIDFeatures deepCopy() {
    return new ReIDFeatures(this);
  }

  @Override
  public void clear() {
    this.bbox = null;
    this.features = null;
  }

  public int getBboxSize() {
    return (this.bbox == null) ? 0 : this.bbox.size();
  }

  public java.util.Iterator<Integer> getBboxIterator() {
    return (this.bbox == null) ? null : this.bbox.iterator();
  }

  public void addToBbox(int elem) {
    if (this.bbox == null) {
      this.bbox = new ArrayList<Integer>();
    }
    this.bbox.add(elem);
  }

  public List<Integer> getBbox() {
    return this.bbox;
  }

  public ReIDFeatures setBbox(List<Integer> bbox) {
    this.bbox = bbox;
    return this;
  }

  public void unsetBbox() {
    this.bbox = null;
  }

  /** Returns true if field bbox is set (has been assigned a value) and false otherwise */
  public boolean isSetBbox() {
    return this.bbox != null;
  }

  public void setBboxIsSet(boolean value) {
    if (!value) {
      this.bbox = null;
    }
  }

  public int getFeaturesSize() {
    return (this.features == null) ? 0 : this.features.size();
  }

  public java.util.Iterator<Double> getFeaturesIterator() {
    return (this.features == null) ? null : this.features.iterator();
  }

  public void addToFeatures(double elem) {
    if (this.features == null) {
      this.features = new ArrayList<Double>();
    }
    this.features.add(elem);
  }

  public List<Double> getFeatures() {
    return this.features;
  }

  public ReIDFeatures setFeatures(List<Double> features) {
    this.features = features;
    return this;
  }

  public void unsetFeatures() {
    this.features = null;
  }

  /** Returns true if field features is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatures() {
    return this.features != null;
  }

  public void setFeaturesIsSet(boolean value) {
    if (!value) {
      this.features = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BBOX:
      if (value == null) {
        unsetBbox();
      } else {
        setBbox((List<Integer>)value);
      }
      break;

    case FEATURES:
      if (value == null) {
        unsetFeatures();
      } else {
        setFeatures((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BBOX:
      return getBbox();

    case FEATURES:
      return getFeatures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BBOX:
      return isSetBbox();
    case FEATURES:
      return isSetFeatures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReIDFeatures)
      return this.equals((ReIDFeatures)that);
    return false;
  }

  public boolean equals(ReIDFeatures that) {
    if (that == null)
      return false;

    boolean this_present_bbox = true && this.isSetBbox();
    boolean that_present_bbox = true && that.isSetBbox();
    if (this_present_bbox || that_present_bbox) {
      if (!(this_present_bbox && that_present_bbox))
        return false;
      if (!this.bbox.equals(that.bbox))
        return false;
    }

    boolean this_present_features = true && this.isSetFeatures();
    boolean that_present_features = true && that.isSetFeatures();
    if (this_present_features || that_present_features) {
      if (!(this_present_features && that_present_features))
        return false;
      if (!this.features.equals(that.features))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bbox = true && (isSetBbox());
    list.add(present_bbox);
    if (present_bbox)
      list.add(bbox);

    boolean present_features = true && (isSetFeatures());
    list.add(present_features);
    if (present_features)
      list.add(features);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReIDFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBbox()).compareTo(other.isSetBbox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbox, other.bbox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReIDFeatures(");
    boolean first = true;

    sb.append("bbox:");
    if (this.bbox == null) {
      sb.append("null");
    } else {
      sb.append(this.bbox);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("features:");
    if (this.features == null) {
      sb.append("null");
    } else {
      sb.append(this.features);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReIDFeaturesStandardSchemeFactory implements SchemeFactory {
    public ReIDFeaturesStandardScheme getScheme() {
      return new ReIDFeaturesStandardScheme();
    }
  }

  private static class ReIDFeaturesStandardScheme extends StandardScheme<ReIDFeatures> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReIDFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BBOX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.bbox = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.bbox.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setBboxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.features = new ArrayList<Double>(_list35.size);
                double _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readDouble();
                  struct.features.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReIDFeatures struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bbox != null) {
        oprot.writeFieldBegin(BBOX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bbox.size()));
          for (int _iter38 : struct.bbox)
          {
            oprot.writeI32(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.features != null) {
        oprot.writeFieldBegin(FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.features.size()));
          for (double _iter39 : struct.features)
          {
            oprot.writeDouble(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReIDFeaturesTupleSchemeFactory implements SchemeFactory {
    public ReIDFeaturesTupleScheme getScheme() {
      return new ReIDFeaturesTupleScheme();
    }
  }

  private static class ReIDFeaturesTupleScheme extends TupleScheme<ReIDFeatures> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReIDFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBbox()) {
        optionals.set(0);
      }
      if (struct.isSetFeatures()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBbox()) {
        {
          oprot.writeI32(struct.bbox.size());
          for (int _iter40 : struct.bbox)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetFeatures()) {
        {
          oprot.writeI32(struct.features.size());
          for (double _iter41 : struct.features)
          {
            oprot.writeDouble(_iter41);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReIDFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.bbox = new ArrayList<Integer>(_list42.size);
          int _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readI32();
            struct.bbox.add(_elem43);
          }
        }
        struct.setBboxIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.features = new ArrayList<Double>(_list45.size);
          double _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readDouble();
            struct.features.add(_elem46);
          }
        }
        struct.setFeaturesIsSet(true);
      }
    }
  }

}

