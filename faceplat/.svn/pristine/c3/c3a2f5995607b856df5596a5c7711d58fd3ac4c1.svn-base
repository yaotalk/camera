package com.minivision.faceplat.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-06")
public class ClothingInfo implements org.apache.thrift.TBase<ClothingInfo, ClothingInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ClothingInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClothingInfo");

  private static final org.apache.thrift.protocol.TField BBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("bbox", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CLOTH_DES_FIELD_DESC = new org.apache.thrift.protocol.TField("cloth_des", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClothingInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClothingInfoTupleSchemeFactory());
  }

  public List<Integer> bbox; // required
  public String cloth_des; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BBOX((short)1, "bbox"),
    CLOTH_DES((short)2, "cloth_des");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BBOX
          return BBOX;
        case 2: // CLOTH_DES
          return CLOTH_DES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BBOX, new org.apache.thrift.meta_data.FieldMetaData("bbox", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CLOTH_DES, new org.apache.thrift.meta_data.FieldMetaData("cloth_des", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClothingInfo.class, metaDataMap);
  }

  public ClothingInfo() {
  }

  public ClothingInfo(
    List<Integer> bbox,
    String cloth_des)
  {
    this();
    this.bbox = bbox;
    this.cloth_des = cloth_des;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClothingInfo(ClothingInfo other) {
    if (other.isSetBbox()) {
      List<Integer> __this__bbox = new ArrayList<Integer>(other.bbox);
      this.bbox = __this__bbox;
    }
    if (other.isSetCloth_des()) {
      this.cloth_des = other.cloth_des;
    }
  }

  public ClothingInfo deepCopy() {
    return new ClothingInfo(this);
  }

  @Override
  public void clear() {
    this.bbox = null;
    this.cloth_des = null;
  }

  public int getBboxSize() {
    return (this.bbox == null) ? 0 : this.bbox.size();
  }

  public java.util.Iterator<Integer> getBboxIterator() {
    return (this.bbox == null) ? null : this.bbox.iterator();
  }

  public void addToBbox(int elem) {
    if (this.bbox == null) {
      this.bbox = new ArrayList<Integer>();
    }
    this.bbox.add(elem);
  }

  public List<Integer> getBbox() {
    return this.bbox;
  }

  public ClothingInfo setBbox(List<Integer> bbox) {
    this.bbox = bbox;
    return this;
  }

  public void unsetBbox() {
    this.bbox = null;
  }

  /** Returns true if field bbox is set (has been assigned a value) and false otherwise */
  public boolean isSetBbox() {
    return this.bbox != null;
  }

  public void setBboxIsSet(boolean value) {
    if (!value) {
      this.bbox = null;
    }
  }

  public String getCloth_des() {
    return this.cloth_des;
  }

  public ClothingInfo setCloth_des(String cloth_des) {
    this.cloth_des = cloth_des;
    return this;
  }

  public void unsetCloth_des() {
    this.cloth_des = null;
  }

  /** Returns true if field cloth_des is set (has been assigned a value) and false otherwise */
  public boolean isSetCloth_des() {
    return this.cloth_des != null;
  }

  public void setCloth_desIsSet(boolean value) {
    if (!value) {
      this.cloth_des = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BBOX:
      if (value == null) {
        unsetBbox();
      } else {
        setBbox((List<Integer>)value);
      }
      break;

    case CLOTH_DES:
      if (value == null) {
        unsetCloth_des();
      } else {
        setCloth_des((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BBOX:
      return getBbox();

    case CLOTH_DES:
      return getCloth_des();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BBOX:
      return isSetBbox();
    case CLOTH_DES:
      return isSetCloth_des();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClothingInfo)
      return this.equals((ClothingInfo)that);
    return false;
  }

  public boolean equals(ClothingInfo that) {
    if (that == null)
      return false;

    boolean this_present_bbox = true && this.isSetBbox();
    boolean that_present_bbox = true && that.isSetBbox();
    if (this_present_bbox || that_present_bbox) {
      if (!(this_present_bbox && that_present_bbox))
        return false;
      if (!this.bbox.equals(that.bbox))
        return false;
    }

    boolean this_present_cloth_des = true && this.isSetCloth_des();
    boolean that_present_cloth_des = true && that.isSetCloth_des();
    if (this_present_cloth_des || that_present_cloth_des) {
      if (!(this_present_cloth_des && that_present_cloth_des))
        return false;
      if (!this.cloth_des.equals(that.cloth_des))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bbox = true && (isSetBbox());
    list.add(present_bbox);
    if (present_bbox)
      list.add(bbox);

    boolean present_cloth_des = true && (isSetCloth_des());
    list.add(present_cloth_des);
    if (present_cloth_des)
      list.add(cloth_des);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClothingInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBbox()).compareTo(other.isSetBbox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbox, other.bbox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloth_des()).compareTo(other.isSetCloth_des());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloth_des()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloth_des, other.cloth_des);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClothingInfo(");
    boolean first = true;

    sb.append("bbox:");
    if (this.bbox == null) {
      sb.append("null");
    } else {
      sb.append(this.bbox);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cloth_des:");
    if (this.cloth_des == null) {
      sb.append("null");
    } else {
      sb.append(this.cloth_des);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClothingInfoStandardSchemeFactory implements SchemeFactory {
    public ClothingInfoStandardScheme getScheme() {
      return new ClothingInfoStandardScheme();
    }
  }

  private static class ClothingInfoStandardScheme extends StandardScheme<ClothingInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClothingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BBOX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.bbox = new ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.bbox.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setBboxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOTH_DES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cloth_des = iprot.readString();
              struct.setCloth_desIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClothingInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bbox != null) {
        oprot.writeFieldBegin(BBOX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bbox.size()));
          for (int _iter27 : struct.bbox)
          {
            oprot.writeI32(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cloth_des != null) {
        oprot.writeFieldBegin(CLOTH_DES_FIELD_DESC);
        oprot.writeString(struct.cloth_des);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClothingInfoTupleSchemeFactory implements SchemeFactory {
    public ClothingInfoTupleScheme getScheme() {
      return new ClothingInfoTupleScheme();
    }
  }

  private static class ClothingInfoTupleScheme extends TupleScheme<ClothingInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClothingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBbox()) {
        optionals.set(0);
      }
      if (struct.isSetCloth_des()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBbox()) {
        {
          oprot.writeI32(struct.bbox.size());
          for (int _iter28 : struct.bbox)
          {
            oprot.writeI32(_iter28);
          }
        }
      }
      if (struct.isSetCloth_des()) {
        oprot.writeString(struct.cloth_des);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClothingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.bbox = new ArrayList<Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.bbox.add(_elem30);
          }
        }
        struct.setBboxIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cloth_des = iprot.readString();
        struct.setCloth_desIsSet(true);
      }
    }
  }

}

