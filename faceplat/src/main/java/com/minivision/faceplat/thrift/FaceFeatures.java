package com.minivision.faceplat.thrift;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-24")
public class FaceFeatures implements org.apache.thrift.TBase<FaceFeatures, FaceFeatures._Fields>, java.io.Serializable, Cloneable, Comparable<FaceFeatures> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FaceFeatures");

  private static final org.apache.thrift.protocol.TField FACE_RECT_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceRectLeft", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FACE_RECT_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("faceRectTop", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FACE_RECT_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("faceRectWidth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FACE_RECT_HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceRectHeight", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence_age", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence_gender", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FaceFeaturesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FaceFeaturesTupleSchemeFactory();

  public int faceRectLeft; // required
  public int faceRectTop; // required
  public int faceRectWidth; // required
  public int faceRectHeight; // required
  public java.util.List<java.lang.Double> features; // required
  public int age; // required
  public int gender; // required
  public double confidence_age; // required
  public double confidence_gender; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FACE_RECT_LEFT((short)1, "faceRectLeft"),
    FACE_RECT_TOP((short)2, "faceRectTop"),
    FACE_RECT_WIDTH((short)3, "faceRectWidth"),
    FACE_RECT_HEIGHT((short)4, "faceRectHeight"),
    FEATURES((short)5, "features"),
    AGE((short)6, "age"),
    GENDER((short)7, "gender"),
    CONFIDENCE_AGE((short)8, "confidence_age"),
    CONFIDENCE_GENDER((short)9, "confidence_gender");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FACE_RECT_LEFT
          return FACE_RECT_LEFT;
        case 2: // FACE_RECT_TOP
          return FACE_RECT_TOP;
        case 3: // FACE_RECT_WIDTH
          return FACE_RECT_WIDTH;
        case 4: // FACE_RECT_HEIGHT
          return FACE_RECT_HEIGHT;
        case 5: // FEATURES
          return FEATURES;
        case 6: // AGE
          return AGE;
        case 7: // GENDER
          return GENDER;
        case 8: // CONFIDENCE_AGE
          return CONFIDENCE_AGE;
        case 9: // CONFIDENCE_GENDER
          return CONFIDENCE_GENDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FACERECTLEFT_ISSET_ID = 0;
  private static final int __FACERECTTOP_ISSET_ID = 1;
  private static final int __FACERECTWIDTH_ISSET_ID = 2;
  private static final int __FACERECTHEIGHT_ISSET_ID = 3;
  private static final int __AGE_ISSET_ID = 4;
  private static final int __GENDER_ISSET_ID = 5;
  private static final int __CONFIDENCE_AGE_ISSET_ID = 6;
  private static final int __CONFIDENCE_GENDER_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FACE_RECT_LEFT, new org.apache.thrift.meta_data.FieldMetaData("faceRectLeft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_RECT_TOP, new org.apache.thrift.meta_data.FieldMetaData("faceRectTop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_RECT_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("faceRectWidth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_RECT_HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("faceRectHeight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIDENCE_AGE, new org.apache.thrift.meta_data.FieldMetaData("confidence_age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIDENCE_GENDER, new org.apache.thrift.meta_data.FieldMetaData("confidence_gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FaceFeatures.class, metaDataMap);
  }

  public FaceFeatures() {
  }

  public FaceFeatures(
    int faceRectLeft,
    int faceRectTop,
    int faceRectWidth,
    int faceRectHeight,
    java.util.List<java.lang.Double> features,
    int age,
    int gender,
    double confidence_age,
    double confidence_gender)
  {
    this();
    this.faceRectLeft = faceRectLeft;
    setFaceRectLeftIsSet(true);
    this.faceRectTop = faceRectTop;
    setFaceRectTopIsSet(true);
    this.faceRectWidth = faceRectWidth;
    setFaceRectWidthIsSet(true);
    this.faceRectHeight = faceRectHeight;
    setFaceRectHeightIsSet(true);
    this.features = features;
    this.age = age;
    setAgeIsSet(true);
    this.gender = gender;
    setGenderIsSet(true);
    this.confidence_age = confidence_age;
    setConfidence_ageIsSet(true);
    this.confidence_gender = confidence_gender;
    setConfidence_genderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FaceFeatures(FaceFeatures other) {
    __isset_bitfield = other.__isset_bitfield;
    this.faceRectLeft = other.faceRectLeft;
    this.faceRectTop = other.faceRectTop;
    this.faceRectWidth = other.faceRectWidth;
    this.faceRectHeight = other.faceRectHeight;
    if (other.isSetFeatures()) {
      java.util.List<java.lang.Double> __this__features = new java.util.ArrayList<java.lang.Double>(other.features);
      this.features = __this__features;
    }
    this.age = other.age;
    this.gender = other.gender;
    this.confidence_age = other.confidence_age;
    this.confidence_gender = other.confidence_gender;
  }

  public FaceFeatures deepCopy() {
    return new FaceFeatures(this);
  }

  @Override
  public void clear() {
    setFaceRectLeftIsSet(false);
    this.faceRectLeft = 0;
    setFaceRectTopIsSet(false);
    this.faceRectTop = 0;
    setFaceRectWidthIsSet(false);
    this.faceRectWidth = 0;
    setFaceRectHeightIsSet(false);
    this.faceRectHeight = 0;
    this.features = null;
    setAgeIsSet(false);
    this.age = 0;
    setGenderIsSet(false);
    this.gender = 0;
    setConfidence_ageIsSet(false);
    this.confidence_age = 0.0;
    setConfidence_genderIsSet(false);
    this.confidence_gender = 0.0;
  }

  public int getFaceRectLeft() {
    return this.faceRectLeft;
  }

  public FaceFeatures setFaceRectLeft(int faceRectLeft) {
    this.faceRectLeft = faceRectLeft;
    setFaceRectLeftIsSet(true);
    return this;
  }

  public void unsetFaceRectLeft() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACERECTLEFT_ISSET_ID);
  }

  /** Returns true if field faceRectLeft is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceRectLeft() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACERECTLEFT_ISSET_ID);
  }

  public void setFaceRectLeftIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACERECTLEFT_ISSET_ID, value);
  }

  public int getFaceRectTop() {
    return this.faceRectTop;
  }

  public FaceFeatures setFaceRectTop(int faceRectTop) {
    this.faceRectTop = faceRectTop;
    setFaceRectTopIsSet(true);
    return this;
  }

  public void unsetFaceRectTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACERECTTOP_ISSET_ID);
  }

  /** Returns true if field faceRectTop is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceRectTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACERECTTOP_ISSET_ID);
  }

  public void setFaceRectTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACERECTTOP_ISSET_ID, value);
  }

  public int getFaceRectWidth() {
    return this.faceRectWidth;
  }

  public FaceFeatures setFaceRectWidth(int faceRectWidth) {
    this.faceRectWidth = faceRectWidth;
    setFaceRectWidthIsSet(true);
    return this;
  }

  public void unsetFaceRectWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACERECTWIDTH_ISSET_ID);
  }

  /** Returns true if field faceRectWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceRectWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACERECTWIDTH_ISSET_ID);
  }

  public void setFaceRectWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACERECTWIDTH_ISSET_ID, value);
  }

  public int getFaceRectHeight() {
    return this.faceRectHeight;
  }

  public FaceFeatures setFaceRectHeight(int faceRectHeight) {
    this.faceRectHeight = faceRectHeight;
    setFaceRectHeightIsSet(true);
    return this;
  }

  public void unsetFaceRectHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACERECTHEIGHT_ISSET_ID);
  }

  /** Returns true if field faceRectHeight is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceRectHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACERECTHEIGHT_ISSET_ID);
  }

  public void setFaceRectHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACERECTHEIGHT_ISSET_ID, value);
  }

  public int getFeaturesSize() {
    return (this.features == null) ? 0 : this.features.size();
  }

  public java.util.Iterator<java.lang.Double> getFeaturesIterator() {
    return (this.features == null) ? null : this.features.iterator();
  }

  public void addToFeatures(double elem) {
    if (this.features == null) {
      this.features = new java.util.ArrayList<java.lang.Double>();
    }
    this.features.add(elem);
  }

  public java.util.List<java.lang.Double> getFeatures() {
    return this.features;
  }

  public FaceFeatures setFeatures(java.util.List<java.lang.Double> features) {
    this.features = features;
    return this;
  }

  public void unsetFeatures() {
    this.features = null;
  }

  /** Returns true if field features is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatures() {
    return this.features != null;
  }

  public void setFeaturesIsSet(boolean value) {
    if (!value) {
      this.features = null;
    }
  }

  public int getAge() {
    return this.age;
  }

  public FaceFeatures setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getGender() {
    return this.gender;
  }

  public FaceFeatures setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public double getConfidence_age() {
    return this.confidence_age;
  }

  public FaceFeatures setConfidence_age(double confidence_age) {
    this.confidence_age = confidence_age;
    setConfidence_ageIsSet(true);
    return this;
  }

  public void unsetConfidence_age() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_AGE_ISSET_ID);
  }

  /** Returns true if field confidence_age is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence_age() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_AGE_ISSET_ID);
  }

  public void setConfidence_ageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_AGE_ISSET_ID, value);
  }

  public double getConfidence_gender() {
    return this.confidence_gender;
  }

  public FaceFeatures setConfidence_gender(double confidence_gender) {
    this.confidence_gender = confidence_gender;
    setConfidence_genderIsSet(true);
    return this;
  }

  public void unsetConfidence_gender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_GENDER_ISSET_ID);
  }

  /** Returns true if field confidence_gender is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence_gender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_GENDER_ISSET_ID);
  }

  public void setConfidence_genderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_GENDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FACE_RECT_LEFT:
      if (value == null) {
        unsetFaceRectLeft();
      } else {
        setFaceRectLeft((java.lang.Integer)value);
      }
      break;

    case FACE_RECT_TOP:
      if (value == null) {
        unsetFaceRectTop();
      } else {
        setFaceRectTop((java.lang.Integer)value);
      }
      break;

    case FACE_RECT_WIDTH:
      if (value == null) {
        unsetFaceRectWidth();
      } else {
        setFaceRectWidth((java.lang.Integer)value);
      }
      break;

    case FACE_RECT_HEIGHT:
      if (value == null) {
        unsetFaceRectHeight();
      } else {
        setFaceRectHeight((java.lang.Integer)value);
      }
      break;

    case FEATURES:
      if (value == null) {
        unsetFeatures();
      } else {
        setFeatures((java.util.List<java.lang.Double>)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((java.lang.Integer)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.Integer)value);
      }
      break;

    case CONFIDENCE_AGE:
      if (value == null) {
        unsetConfidence_age();
      } else {
        setConfidence_age((java.lang.Double)value);
      }
      break;

    case CONFIDENCE_GENDER:
      if (value == null) {
        unsetConfidence_gender();
      } else {
        setConfidence_gender((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FACE_RECT_LEFT:
      return getFaceRectLeft();

    case FACE_RECT_TOP:
      return getFaceRectTop();

    case FACE_RECT_WIDTH:
      return getFaceRectWidth();

    case FACE_RECT_HEIGHT:
      return getFaceRectHeight();

    case FEATURES:
      return getFeatures();

    case AGE:
      return getAge();

    case GENDER:
      return getGender();

    case CONFIDENCE_AGE:
      return getConfidence_age();

    case CONFIDENCE_GENDER:
      return getConfidence_gender();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FACE_RECT_LEFT:
      return isSetFaceRectLeft();
    case FACE_RECT_TOP:
      return isSetFaceRectTop();
    case FACE_RECT_WIDTH:
      return isSetFaceRectWidth();
    case FACE_RECT_HEIGHT:
      return isSetFaceRectHeight();
    case FEATURES:
      return isSetFeatures();
    case AGE:
      return isSetAge();
    case GENDER:
      return isSetGender();
    case CONFIDENCE_AGE:
      return isSetConfidence_age();
    case CONFIDENCE_GENDER:
      return isSetConfidence_gender();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FaceFeatures)
      return this.equals((FaceFeatures)that);
    return false;
  }

  public boolean equals(FaceFeatures that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_faceRectLeft = true;
    boolean that_present_faceRectLeft = true;
    if (this_present_faceRectLeft || that_present_faceRectLeft) {
      if (!(this_present_faceRectLeft && that_present_faceRectLeft))
        return false;
      if (this.faceRectLeft != that.faceRectLeft)
        return false;
    }

    boolean this_present_faceRectTop = true;
    boolean that_present_faceRectTop = true;
    if (this_present_faceRectTop || that_present_faceRectTop) {
      if (!(this_present_faceRectTop && that_present_faceRectTop))
        return false;
      if (this.faceRectTop != that.faceRectTop)
        return false;
    }

    boolean this_present_faceRectWidth = true;
    boolean that_present_faceRectWidth = true;
    if (this_present_faceRectWidth || that_present_faceRectWidth) {
      if (!(this_present_faceRectWidth && that_present_faceRectWidth))
        return false;
      if (this.faceRectWidth != that.faceRectWidth)
        return false;
    }

    boolean this_present_faceRectHeight = true;
    boolean that_present_faceRectHeight = true;
    if (this_present_faceRectHeight || that_present_faceRectHeight) {
      if (!(this_present_faceRectHeight && that_present_faceRectHeight))
        return false;
      if (this.faceRectHeight != that.faceRectHeight)
        return false;
    }

    boolean this_present_features = true && this.isSetFeatures();
    boolean that_present_features = true && that.isSetFeatures();
    if (this_present_features || that_present_features) {
      if (!(this_present_features && that_present_features))
        return false;
      if (!this.features.equals(that.features))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_confidence_age = true;
    boolean that_present_confidence_age = true;
    if (this_present_confidence_age || that_present_confidence_age) {
      if (!(this_present_confidence_age && that_present_confidence_age))
        return false;
      if (this.confidence_age != that.confidence_age)
        return false;
    }

    boolean this_present_confidence_gender = true;
    boolean that_present_confidence_gender = true;
    if (this_present_confidence_gender || that_present_confidence_gender) {
      if (!(this_present_confidence_gender && that_present_confidence_gender))
        return false;
      if (this.confidence_gender != that.confidence_gender)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + faceRectLeft;

    hashCode = hashCode * 8191 + faceRectTop;

    hashCode = hashCode * 8191 + faceRectWidth;

    hashCode = hashCode * 8191 + faceRectHeight;

    hashCode = hashCode * 8191 + ((isSetFeatures()) ? 131071 : 524287);
    if (isSetFeatures())
      hashCode = hashCode * 8191 + features.hashCode();

    hashCode = hashCode * 8191 + age;

    hashCode = hashCode * 8191 + gender;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(confidence_age);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(confidence_gender);

    return hashCode;
  }

  @Override
  public int compareTo(FaceFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFaceRectLeft()).compareTo(other.isSetFaceRectLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceRectLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceRectLeft, other.faceRectLeft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFaceRectTop()).compareTo(other.isSetFaceRectTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceRectTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceRectTop, other.faceRectTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFaceRectWidth()).compareTo(other.isSetFaceRectWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceRectWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceRectWidth, other.faceRectWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFaceRectHeight()).compareTo(other.isSetFaceRectHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceRectHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceRectHeight, other.faceRectHeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidence_age()).compareTo(other.isSetConfidence_age());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence_age()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence_age, other.confidence_age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidence_gender()).compareTo(other.isSetConfidence_gender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence_gender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence_gender, other.confidence_gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FaceFeatures(");
    boolean first = true;

    sb.append("faceRectLeft:");
    sb.append(this.faceRectLeft);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceRectTop:");
    sb.append(this.faceRectTop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceRectWidth:");
    sb.append(this.faceRectWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceRectHeight:");
    sb.append(this.faceRectHeight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("features:");
    if (this.features == null) {
      sb.append("null");
    } else {
      sb.append(this.features);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidence_age:");
    sb.append(this.confidence_age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidence_gender:");
    sb.append(this.confidence_gender);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FaceFeaturesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceFeaturesStandardScheme getScheme() {
      return new FaceFeaturesStandardScheme();
    }
  }

  private static class FaceFeaturesStandardScheme extends org.apache.thrift.scheme.StandardScheme<FaceFeatures> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FaceFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FACE_RECT_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceRectLeft = iprot.readI32();
              struct.setFaceRectLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACE_RECT_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceRectTop = iprot.readI32();
              struct.setFaceRectTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACE_RECT_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceRectWidth = iprot.readI32();
              struct.setFaceRectWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACE_RECT_HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceRectHeight = iprot.readI32();
              struct.setFaceRectHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.features = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.features.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONFIDENCE_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence_age = iprot.readDouble();
              struct.setConfidence_ageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONFIDENCE_GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence_gender = iprot.readDouble();
              struct.setConfidence_genderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FaceFeatures struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FACE_RECT_LEFT_FIELD_DESC);
      oprot.writeI32(struct.faceRectLeft);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_RECT_TOP_FIELD_DESC);
      oprot.writeI32(struct.faceRectTop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_RECT_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.faceRectWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_RECT_HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.faceRectHeight);
      oprot.writeFieldEnd();
      if (struct.features != null) {
        oprot.writeFieldBegin(FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.features.size()));
          for (double _iter3 : struct.features)
          {
            oprot.writeDouble(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_AGE_FIELD_DESC);
      oprot.writeDouble(struct.confidence_age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_GENDER_FIELD_DESC);
      oprot.writeDouble(struct.confidence_gender);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FaceFeaturesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceFeaturesTupleScheme getScheme() {
      return new FaceFeaturesTupleScheme();
    }
  }

  private static class FaceFeaturesTupleScheme extends org.apache.thrift.scheme.TupleScheme<FaceFeatures> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FaceFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFaceRectLeft()) {
        optionals.set(0);
      }
      if (struct.isSetFaceRectTop()) {
        optionals.set(1);
      }
      if (struct.isSetFaceRectWidth()) {
        optionals.set(2);
      }
      if (struct.isSetFaceRectHeight()) {
        optionals.set(3);
      }
      if (struct.isSetFeatures()) {
        optionals.set(4);
      }
      if (struct.isSetAge()) {
        optionals.set(5);
      }
      if (struct.isSetGender()) {
        optionals.set(6);
      }
      if (struct.isSetConfidence_age()) {
        optionals.set(7);
      }
      if (struct.isSetConfidence_gender()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFaceRectLeft()) {
        oprot.writeI32(struct.faceRectLeft);
      }
      if (struct.isSetFaceRectTop()) {
        oprot.writeI32(struct.faceRectTop);
      }
      if (struct.isSetFaceRectWidth()) {
        oprot.writeI32(struct.faceRectWidth);
      }
      if (struct.isSetFaceRectHeight()) {
        oprot.writeI32(struct.faceRectHeight);
      }
      if (struct.isSetFeatures()) {
        {
          oprot.writeI32(struct.features.size());
          for (double _iter4 : struct.features)
          {
            oprot.writeDouble(_iter4);
          }
        }
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetConfidence_age()) {
        oprot.writeDouble(struct.confidence_age);
      }
      if (struct.isSetConfidence_gender()) {
        oprot.writeDouble(struct.confidence_gender);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FaceFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.faceRectLeft = iprot.readI32();
        struct.setFaceRectLeftIsSet(true);
      }
      if (incoming.get(1)) {
        struct.faceRectTop = iprot.readI32();
        struct.setFaceRectTopIsSet(true);
      }
      if (incoming.get(2)) {
        struct.faceRectWidth = iprot.readI32();
        struct.setFaceRectWidthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.faceRectHeight = iprot.readI32();
        struct.setFaceRectHeightIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.features = new java.util.ArrayList<java.lang.Double>(_list5.size);
          double _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readDouble();
            struct.features.add(_elem6);
          }
        }
        struct.setFeaturesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.confidence_age = iprot.readDouble();
        struct.setConfidence_ageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.confidence_gender = iprot.readDouble();
        struct.setConfidence_genderIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

