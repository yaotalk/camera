package com.minivision.faceplat.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-06")
public class LandmarkResult implements org.apache.thrift.TBase<LandmarkResult, LandmarkResult._Fields>, java.io.Serializable, Cloneable, Comparable<LandmarkResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LandmarkResult");

  private static final org.apache.thrift.protocol.TField BBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("bbox", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PTS_FIELD_DESC = new org.apache.thrift.protocol.TField("pts", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LANDMARK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("landmark_count", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LandmarkResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LandmarkResultTupleSchemeFactory());
  }

  public FaceResult bbox; // required
  public List<Integer> pts; // required
  public int landmark_count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BBOX((short)1, "bbox"),
    PTS((short)2, "pts"),
    LANDMARK_COUNT((short)3, "landmark_count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BBOX
          return BBOX;
        case 2: // PTS
          return PTS;
        case 3: // LANDMARK_COUNT
          return LANDMARK_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LANDMARK_COUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BBOX, new org.apache.thrift.meta_data.FieldMetaData("bbox", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FaceResult.class)));
    tmpMap.put(_Fields.PTS, new org.apache.thrift.meta_data.FieldMetaData("pts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LANDMARK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("landmark_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LandmarkResult.class, metaDataMap);
  }

  public LandmarkResult() {
  }

  public LandmarkResult(
    FaceResult bbox,
    List<Integer> pts,
    int landmark_count)
  {
    this();
    this.bbox = bbox;
    this.pts = pts;
    this.landmark_count = landmark_count;
    setLandmark_countIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LandmarkResult(LandmarkResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBbox()) {
      this.bbox = new FaceResult(other.bbox);
    }
    if (other.isSetPts()) {
      List<Integer> __this__pts = new ArrayList<Integer>(other.pts);
      this.pts = __this__pts;
    }
    this.landmark_count = other.landmark_count;
  }

  public LandmarkResult deepCopy() {
    return new LandmarkResult(this);
  }

  @Override
  public void clear() {
    this.bbox = null;
    this.pts = null;
    setLandmark_countIsSet(false);
    this.landmark_count = 0;
  }

  public FaceResult getBbox() {
    return this.bbox;
  }

  public LandmarkResult setBbox(FaceResult bbox) {
    this.bbox = bbox;
    return this;
  }

  public void unsetBbox() {
    this.bbox = null;
  }

  /** Returns true if field bbox is set (has been assigned a value) and false otherwise */
  public boolean isSetBbox() {
    return this.bbox != null;
  }

  public void setBboxIsSet(boolean value) {
    if (!value) {
      this.bbox = null;
    }
  }

  public int getPtsSize() {
    return (this.pts == null) ? 0 : this.pts.size();
  }

  public java.util.Iterator<Integer> getPtsIterator() {
    return (this.pts == null) ? null : this.pts.iterator();
  }

  public void addToPts(int elem) {
    if (this.pts == null) {
      this.pts = new ArrayList<Integer>();
    }
    this.pts.add(elem);
  }

  public List<Integer> getPts() {
    return this.pts;
  }

  public LandmarkResult setPts(List<Integer> pts) {
    this.pts = pts;
    return this;
  }

  public void unsetPts() {
    this.pts = null;
  }

  /** Returns true if field pts is set (has been assigned a value) and false otherwise */
  public boolean isSetPts() {
    return this.pts != null;
  }

  public void setPtsIsSet(boolean value) {
    if (!value) {
      this.pts = null;
    }
  }

  public int getLandmark_count() {
    return this.landmark_count;
  }

  public LandmarkResult setLandmark_count(int landmark_count) {
    this.landmark_count = landmark_count;
    setLandmark_countIsSet(true);
    return this;
  }

  public void unsetLandmark_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANDMARK_COUNT_ISSET_ID);
  }

  /** Returns true if field landmark_count is set (has been assigned a value) and false otherwise */
  public boolean isSetLandmark_count() {
    return EncodingUtils.testBit(__isset_bitfield, __LANDMARK_COUNT_ISSET_ID);
  }

  public void setLandmark_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANDMARK_COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BBOX:
      if (value == null) {
        unsetBbox();
      } else {
        setBbox((FaceResult)value);
      }
      break;

    case PTS:
      if (value == null) {
        unsetPts();
      } else {
        setPts((List<Integer>)value);
      }
      break;

    case LANDMARK_COUNT:
      if (value == null) {
        unsetLandmark_count();
      } else {
        setLandmark_count((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BBOX:
      return getBbox();

    case PTS:
      return getPts();

    case LANDMARK_COUNT:
      return getLandmark_count();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BBOX:
      return isSetBbox();
    case PTS:
      return isSetPts();
    case LANDMARK_COUNT:
      return isSetLandmark_count();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LandmarkResult)
      return this.equals((LandmarkResult)that);
    return false;
  }

  public boolean equals(LandmarkResult that) {
    if (that == null)
      return false;

    boolean this_present_bbox = true && this.isSetBbox();
    boolean that_present_bbox = true && that.isSetBbox();
    if (this_present_bbox || that_present_bbox) {
      if (!(this_present_bbox && that_present_bbox))
        return false;
      if (!this.bbox.equals(that.bbox))
        return false;
    }

    boolean this_present_pts = true && this.isSetPts();
    boolean that_present_pts = true && that.isSetPts();
    if (this_present_pts || that_present_pts) {
      if (!(this_present_pts && that_present_pts))
        return false;
      if (!this.pts.equals(that.pts))
        return false;
    }

    boolean this_present_landmark_count = true;
    boolean that_present_landmark_count = true;
    if (this_present_landmark_count || that_present_landmark_count) {
      if (!(this_present_landmark_count && that_present_landmark_count))
        return false;
      if (this.landmark_count != that.landmark_count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bbox = true && (isSetBbox());
    list.add(present_bbox);
    if (present_bbox)
      list.add(bbox);

    boolean present_pts = true && (isSetPts());
    list.add(present_pts);
    if (present_pts)
      list.add(pts);

    boolean present_landmark_count = true;
    list.add(present_landmark_count);
    if (present_landmark_count)
      list.add(landmark_count);

    return list.hashCode();
  }

  @Override
  public int compareTo(LandmarkResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBbox()).compareTo(other.isSetBbox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBbox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bbox, other.bbox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPts()).compareTo(other.isSetPts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pts, other.pts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLandmark_count()).compareTo(other.isSetLandmark_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLandmark_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.landmark_count, other.landmark_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LandmarkResult(");
    boolean first = true;

    sb.append("bbox:");
    if (this.bbox == null) {
      sb.append("null");
    } else {
      sb.append(this.bbox);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pts:");
    if (this.pts == null) {
      sb.append("null");
    } else {
      sb.append(this.pts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("landmark_count:");
    sb.append(this.landmark_count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (bbox != null) {
      bbox.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LandmarkResultStandardSchemeFactory implements SchemeFactory {
    public LandmarkResultStandardScheme getScheme() {
      return new LandmarkResultStandardScheme();
    }
  }

  private static class LandmarkResultStandardScheme extends StandardScheme<LandmarkResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LandmarkResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BBOX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bbox = new FaceResult();
              struct.bbox.read(iprot);
              struct.setBboxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.pts = new ArrayList<Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.pts.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setPtsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANDMARK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.landmark_count = iprot.readI32();
              struct.setLandmark_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LandmarkResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bbox != null) {
        oprot.writeFieldBegin(BBOX_FIELD_DESC);
        struct.bbox.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pts != null) {
        oprot.writeFieldBegin(PTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pts.size()));
          for (int _iter51 : struct.pts)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LANDMARK_COUNT_FIELD_DESC);
      oprot.writeI32(struct.landmark_count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LandmarkResultTupleSchemeFactory implements SchemeFactory {
    public LandmarkResultTupleScheme getScheme() {
      return new LandmarkResultTupleScheme();
    }
  }

  private static class LandmarkResultTupleScheme extends TupleScheme<LandmarkResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LandmarkResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBbox()) {
        optionals.set(0);
      }
      if (struct.isSetPts()) {
        optionals.set(1);
      }
      if (struct.isSetLandmark_count()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBbox()) {
        struct.bbox.write(oprot);
      }
      if (struct.isSetPts()) {
        {
          oprot.writeI32(struct.pts.size());
          for (int _iter52 : struct.pts)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
      if (struct.isSetLandmark_count()) {
        oprot.writeI32(struct.landmark_count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LandmarkResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.bbox = new FaceResult();
        struct.bbox.read(iprot);
        struct.setBboxIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pts = new ArrayList<Integer>(_list53.size);
          int _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readI32();
            struct.pts.add(_elem54);
          }
        }
        struct.setPtsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.landmark_count = iprot.readI32();
        struct.setLandmark_countIsSet(true);
      }
    }
  }

}

